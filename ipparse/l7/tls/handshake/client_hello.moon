--
-- SPDX-FileCopyrightText: (c) 2024-2025 jperon <cataclop@hotmail.com>
-- SPDX-License-Identifier: MIT OR GPL-2.0-only
--

--- TLS ClientHello Parsing and Packing Module
-- This module provides utilities for parsing and packing TLS ClientHello messages.
-- It supports handling the version, client random, session ID, cipher suites, compression methods, and extensions.
--
-- ### Features
-- - Parse and pack TLS ClientHello messages.
-- - Support for all fields in the ClientHello structure.
--
-- ### TLS ClientHello Structure
-- ```
-- ClientHello {
--   version (16): Protocol version.
--   client_random (32 bytes): Random value generated by the client.
--   session_id (variable): Session ID.
--   ciphers (variable): List of cipher suites.
--   compressions (variable): List of compression methods.
--   extensions (variable): List of extensions.
-- }
-- ```
--
-- References:
-- - RFC 5246: The Transport Layer Security (TLS) Protocol Version 1.2
-- - RFC 8446: The Transport Layer Security (TLS) Protocol Version 1.3
--
-- @module tls.handshake.client_hello

pack: sp, unpack: su = string

--- Packs a TLS ClientHello message into a binary string.
-- Constructs the binary representation of the ClientHello message.
-- @tparam table self The ClientHello message object.
-- @treturn string Binary string representing the packed ClientHello message.
pack = =>
  sp ">H c32 s1 s2 s1 s2", @version, @client_random, @session_id, @ciphers, @compressions, @extensions

_mt =
  --- Converts the ClientHello message object to a binary string.
  -- @treturn string Binary string representing the ClientHello message.
  __tostring: pack

--- Parses a binary string into a TLS ClientHello message structure.
-- Extracts the version, client random, session ID, cipher suites, compression methods, and extensions.
-- @tparam string self The binary string containing the ClientHello message.
-- @tparam[opt=1] number off Offset to start parsing from. Defaults to 1.
-- @treturn table Parsed ClientHello message as a table.
-- @treturn number The next offset after parsing.
parse = (off=1) =>
  version, client_random, session_id, ciphers, compressions, extensions, _off = su ">H c32 s1 s2 s1 s2", @, off
  setmetatable({
    :version, :client_random, :session_id, :ciphers, :compressions, :extensions
  }, _mt), _off

:parse, :pack
